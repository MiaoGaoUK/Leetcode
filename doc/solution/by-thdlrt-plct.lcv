### 解题思路

矩阵动态规划中常用方法

### 代码

* cpp

```cpp
class NumMatrix {
public:
    int**dp;
    NumMatrix(vector<vector<int>>& matrix) {
        dp=new int*[matrix.size()];
        for(int i=0;i<matrix.size();i++)
        dp[i]=new int[matrix[0].size()];
        dp[0][0]=matrix[0][0];
        for(int i=1;i<matrix[0].size();i++)
        {
            dp[0][i]=dp[0][i-1]+matrix[0][i];
        }
        for(int j=1;j<matrix.size();j++)
        {
            dp[j][0]=dp[j-1][0]+matrix[j][0];
        }
        for(int i=1;i<matrix.size();i++)
        {
            for(int j=1;j<matrix[0].size();j++)
            {
                dp[i][j]=matrix[i][j]+dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1];
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int num=0,num1=0,num2=0,num3=0;
        num=dp[row2][col2];
        if(row1>0&&col1>0)
        {
            num2=dp[row1-1][col2];
            num1=dp[row2][col1-1];
            num3=dp[row1-1][col1-1];
        }
        else if(row1>0)//主要要小心边界判断
        {
            num2=dp[row1-1][col2];
        }
        else if(col1>0)
        {
            num1=dp[row2][col1-1];
        }
        else
        ;
        return num+num3-num1-num2;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
```

