思路：

1. 计算树的高度$h$，除了最底层可能不是满的，其他层都是满的，

2. 其他层节点数为$2^{h-1}-1$

3. 单独计算最底层的节点个数
   - 从根节点开始，每次选中左右子树其中一支进入

   - 判断最底层中间节点是否存在（这里的中间节点定义为右子树的最底层最左边节点）
     - 存在则进入右子树，并加上当前结点最底层个数的一半
     - 不存在则进入左子树

代码如下

* c++

```c++
int countNodes(TreeNode* root) {
    if (!root) return 0;
    if (!root->left) return 1;
    TreeNode *node = root, *tmp = root;
    int h = 1; while (tmp->left) { ++h; tmp = tmp->left; } //计算高度
    int cnt = 0; //最底层的结点个数
    for (int d = 1, n = 1 << (h - 2); d <= h - 1; ++d, n >>= 1) {
        tmp = node->right;
        for (int i = d + 1; i <= h - 1; ++i) //查找右子树的最底层最左边节点是否存在
            tmp = tmp->left;
        if (tmp) { //存在则进入右子树，并加上左子树最底层的结点数量
            node = node->right;
            cnt += n;
        } else {
            node = node->left;
        }
    }
    if (node) cnt += 1; // d = h 时
    return (1 << (h - 1)) - 1 + cnt;
}
```

如果对你有帮助或启发，不妨给一个👍吧~
