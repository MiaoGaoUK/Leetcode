### 解题思路

此处撰写解题思路

### 代码

* cpp

```cpp
class Solution {
public:
    int countNodes(TreeNode* root) {
        return DFS(root);
    }
    int DFS(TreeNode* root)
    {
        if(!root)return 0;
        TreeNode*l=root->left,*r=root->right;//判断以root为根节点是否为满二叉树
        int cntl=1,cntr=1;
        while(l)l=l->left,cntl++;
        while(r)r=r->right,cntr++;
        if(cntl==cntr)return (int)pow(2,cntl)-1;//如果是，则返回公式
        return DFS(root->left)+DFS(root->right)+1;  //如果不是，就向下递归，递归出口为if(!root)return 0
    }
};
```

* cpp

```cpp
class Solution {
public:
    int countNodes(TreeNode* root) {
        int depth=getdepth(root);
        int l=0,r=(int)pow(2,depth-1)-1;//第depth层  第0个节点和第2^(depth-1)个节点
        while(l<r)
        {
            int mid=(l+r+1)/2;
            if(check(root,mid,depth-1))l=mid;
            else r=mid-1;
        }
        return (int)pow(2,depth-1)-1+l+1;
    }
    int getdepth(TreeNode*root)//求最大深度，利用性质
    {
        if(!root)return 0;
        return getdepth(root->left)+1;
    }
    bool check(TreeNode* root,int ans,int depth)
    {
        if(depth==0)    //到达底部，看节点是否为null
        {
            if(root)return true;
            return false;
        }
        if(((ans>>(depth-1))&1)==0)return check(root->left,ans,depth-1);//利用位运算，从高到低得到数位
        return check(root->right,ans,depth-1);      //为0是为向左，为1视为向右
    }
};
```

