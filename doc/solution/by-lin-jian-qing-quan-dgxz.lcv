方法一：
杨辉三角每一层比上一层的数字个数多1，而且每一层首末数字均为1，中间数字为上一层犄角数字之和，这样就可以获得该层数字。代码实现如下：

* 

```
class Solution(object):
    # 思路：每一行由前一行数字相加得到
    def generate(self, numRows: int) -> list:
        if numRows == 1:
            return [[1]]
        elif numRows == 2:
            return [[1], [1, 1]]
        else:
            res = [[1], [1, 1]]
            for i in range(2, numRows):
                l = [0] * (i + 1)
                l[0] = l[-1] = 1
                for j in range(1, i):
                    l[j] = res[i - 1][j - 1] + res[i - 1][j]
                res.append(l)
            return res
```

方法二：二项式定理
众所周知，杨辉三角每一层的数字是对应二项式的系数，采用二项式定理即可计算对应层的数字。代码实现如下：

* 

```
class Solution(object):
    # 思路：每一行由二项式定理计算得到
    def generate(self, numRows: int) -> list:
        if numRows == 1:
            return [[1]]
        else:
            res = [[1]]
            for i in range(1, numRows):
                l = []
                for j in range(0, i + 1):
                    l.append(int(factorial(i) / (factorial(j) * factorial(i - j))))
                res.append(l)
        return res
```

