## 方法一：二维前缀和

二维前缀和的思路就是用一个二维数组来存放“从左上角到某个元素的矩形中所有元素”的和。

例如$prefix[2][3]$就表示以$(0,0)$和$(2,3)$为对角的矩形中，所有元素的和。

初始化和查询的方法如图所示

![Demonstration.png](https://pic.leetcode-cn.com/1663412553-DXuxDJ-Demonstration.png)

初始化的时候，红色框里的元素的和可以由```上方紫色矩形的元素和```、```左边绿色矩形的元素和```、```紫色绿色重合部分矩形的元素和```三者在$O(1)$的时间内求得。

查询的时候，红色框里的元素和可以由```蓝色框里的元素和```、```上方紫色矩形的元素和```、```左边绿色矩形的元素和```、```紫色绿色重合部分矩形的元素和```四者在$O(1)$的时间内求得。

因为第一行的“上边的绿色矩形”已经超出了数组的范围，因此为了方便，在开辟$prefix$数组的时候，可以在上方多开辟一行，左侧多开辟一列。即：为$n\times m$大小的原始数组开辟$(n+1)\times(m+1)$大小的$prefix$数组以防止计算过程越界。同时，$prefix$数组从下标$(1,1)$开始使用。

+ 时间复杂度：初始化$O(nm)$，查询$O(1)$。其中矩阵的形状为$n\times m$
+ 空间复杂度$O(nm)$

### AC代码

#### C++

* cpp

```cpp
class NumMatrix {
private:
    vector<vector<int>> prefix;

    void init(vector<vector<int>>& a) {
        int n = a.size(), m = a[0].size();
        prefix.resize(n + 1, vector<int>(m + 1, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + a[i][j];
            }
        }
    }
public:
    NumMatrix(vector<vector<int>>& matrix) {
        init(matrix);
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return prefix[row2 + 1][col2 + 1] - prefix[row1][col2 + 1] - prefix[row2 + 1][col1] + prefix[row1][col1];
    }
};
```

> 同步发文于CSDN，原创不易，转载请附上[原文链接](https://leetcode.letmefly.xyz/2022/09/17/LeetCode%200304.%E4%BA%8C%E7%BB%B4%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E7%9F%A9%E9%98%B5%E4%B8%8D%E5%8F%AF%E5%8F%98/)哦~
> Tisfy：[https://letmefly.blog.csdn.net/article/details/126909280](https://letmefly.blog.csdn.net/article/details/126909280)

