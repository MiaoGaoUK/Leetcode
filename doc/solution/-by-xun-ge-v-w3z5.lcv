### 解题思路

完全二叉树只有两种情况：
- **情况一：就是满二叉树**
- **情况二：最后一层叶子节点没有满。**

- 对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。

- 对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。
  ![image.png](https://pic.leetcode-cn.com/1661315843-JzYhdP-image.png)

**简单的分治思想**

### 代码

* c

```c
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


int countNodes(struct TreeNode* root){
    if (root == NULL) return 0;
    struct TreeNode* left = root->left;
    struct TreeNode* right = root->right;
    int leftHeight = 0, rightHeight = 0; // 这里初始为0是有目的的，为了下面求指数方便
    while (left) {  // 求左子树深度
        left = left->left;
        leftHeight++;
    }
    while (right) { // 求右子树深度
        right = right->right;
        rightHeight++;
    }
    if (leftHeight == rightHeight) {
        return (2 << leftHeight) - 1; // 注意(2<<1) 相当于2^2，所以leftHeight初始为0
    }
    return countNodes(root->left) + countNodes(root->right) + 1;
}
```

