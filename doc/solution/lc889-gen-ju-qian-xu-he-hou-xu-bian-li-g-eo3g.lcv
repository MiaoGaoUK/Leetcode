此题要求对前序、后序遍历有比较深的理解。它们都具有清晰的**递归**结构。需要注意到二叉树的前序、后序遍历**对应在数组中的结构特性**。

前序遍历数组：根节点-树的左半部分-树的右半部分

后序遍历数组：树的左半部分-树的右半部分-根节点

而”树的左/右半部分”又可以视作一棵子树，从而实现递归，直到子数组的长度为1（递归边界）。

* cpp

```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        TreeNode *root = new TreeNode;
        root->left = NULL;
        root->right = NULL;
        buildTree(root, preorder, 0, preorder.size() - 1, postorder, 0, 0);
        return root;
    }
    void buildTree(TreeNode *root, vector<int> &pre, int preL, int preR, vector<int> &post, int postL, int postR) {
        if(preL > preR) return ;
        if(preL == preR) {//只有一个节点了
            root->val = pre[preL];
            return ;
        }
        //不止一个节点 说明至少存在一个子节点
        root->val = pre[preL];
        root->left = NULL;
        root->right = NULL;
        preL++;//preL 指向左子节点
        while(postR < post.size() && post[postR] != pre[preL]) {//找到左子节点在后序中的位置，该位置前的节点都是其子节点
            postR++;
        }//postR - postL = 左子节点的子节点数
        root->left = new TreeNode;
        int preLR = preL + postR - postL;//分割点：左区间的右端点
        buildTree(root->left, pre, preL, preLR, post, postL, postL);
        preL = preLR + 1;//preL移动至右子节点
        if(preL > preR) { //超了，说明没有右节点
            return ;
        }
        root->right = new TreeNode;
        postL = postR+1;
        while(postR < post.size() && post[postR] != pre[preL]) {
            postR++;
        }
        buildTree(root->right, pre, preL, preR, post, postL, postL);
    }
};
```

